#!/usr/bin/env node

const { dapploy } = require('./src/deployDapp')
const { runDapper } = require('./src/runDapper')

/* ** Main Program **

    @description - This program may be configured using parameter options below
    Makes it simple to deploy your contracts to your network of choice
    run with --help
*/
const program = require('commander');
const defaultConfig = 'dapploy.conf'
program
  .version('0.1.0')
  .option('-t, --truffle <dir>', 'Truffle Project Directory')
  .option('-o, --output <dir>', 'Contract Output Directory')
  .option('-n, --network <network>', 'Deploy to network')
  .option('-c, --config [config]', 'Config file', defaultConfig)
  .option('-x, --excludes [Contract1,Contract2]', 'Exclude contracts from the web3 interface (files are still copied)')  
  .option('-l, --clean', 'Clean contracts before migrating')
  .option('-r, --remoteOnly', 'Only copy contracts remote')
  .option('-s, --skipAWS', 'Skip remote copy to aws config')
  .option('-y, --copyOnly', 'Only do folder copy and S3 copy')

let dapperRun = false
let execute = [(program) => {
    return dapploy(program)
}]
program
  .command('dapper')
  .description('View your smart contracts using dapper')
  .option("-d, --dapploy", "Run fresh dapploy before starting")
  .action(function(option){
    //   console.log("HOTOIN",option)
    if (option.dapploy) {
        if (!option.config || option.config == defaultConfig) {
            // force using dapper config to set up paths for dapper dependency
            option.config = 'dapploy_dapper.conf'
        }
        execute.push(() => {
            return runDapper(program)
        })
    } else {
        execute = [(program) => {
            return runDapper(program)
        }]
    }
  });

program.parse(process.argv);

(async () => {
    for (const exe of execute) {
        try {
            await exe(program)
        } catch (err) {
            console.log(err)
            process.exit(1);
            break
        }
    }
})()



