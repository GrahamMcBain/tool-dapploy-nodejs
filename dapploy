#!/usr/bin/env node

/* ** Main Program **

    @description - This program may be configured using parameter options below
    Makes it simple to deploy your contracts to your network of choice
    run with --help
*/
const program = require(`commander`)
const { dapploy } = require(`./src/deployDapp`)
const { runDapper } = require(`./src/runDapper`)
const { parseConfig } = require('./src/configParser')

const defaultConfig = `dapploy.conf`
program
  .version('0.1.0')
  .option('-t, --truffle <dir>', 'Truffle Project Directory')
  .option('-o, --output <dir>', 'Contract Output Directory')
  .option('-n, --network <network>', 'Deploy to network')
  .option('-c, --config [config]', 'Config file', defaultConfig)
  .option('-x, --excludes [Contract1,Contract2]', 'Exclude contracts from the web3 interface (files are still copied)')
  .option('-i, --includes [Contract1,Contract2]', 'Include contracts from the web3 interface (files are still copied)')
  .option('-l, --clean', 'Clean contracts before migrating')
  .option('-r, --remoteOnly', 'Only copy contracts remote')
  .option('-s, --skipAWS', 'Skip remote copy to aws config')
  .option('-y, --copyOnly', 'Only do folder copy and S3 copy')


let execute = [p => dapploy(p)]

program
  .command(`dapper`)
  .description(`View your smart contracts using dapper`)
  .option(`-b, --build`, `Build and Migrate ABI before starting`)
  .option(`-d, --distribute`, `Create dapper distribution in ./dist`)
  .action((option) => {
    program.dapper = true
    if (option.build) {
      execute.push(p => runDapper(p))
    } else {
      execute = [p => runDapper(p)]
    }
  })

program.parse(process.argv);

 
async function asyncForEach(array, callback) {
  for (let index = 0; index < array.length; index++) {
    await callback(array[index], index, array)
  }
}

try {
    parseConfig(program)
  } catch (err) {
  console.log(err)
    process.exit(1)
  }
(async () => {
  asyncForEach(execute, async (exe) => {
    console.log("Iterating", exe)
    try {
      await exe(program)
    } catch (err) {
      console.log(err)
      process.exit(1)
      throw err
    }
  })
})()
